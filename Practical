#include<graphics.h>  
//#include<conio.h>  
#include<stdio.h>  
main()  
{  
    int gd = DETECT ,gm, i;  
    float x, y,dx,dy,steps;  
    int x0, x1, y0, y1;  
    char pathtodriver[]="";
    initgraph(&gd, &gm, pathtodriver);  
    setbkcolor(WHITE);  
    x0 = 300 , y0 = 100, x1 = 300, y1 = 200;  
    dx = (float)(x1 - x0);  
    dy = (float)(y1 - y0);  
    if(dx>=dy)  
           {  
        steps = dx;  
    }  
    else  
           {  
        steps = dy;  
    }  
    dx = dx/steps;  
    dy = dy/steps;  
    x = x0;  
    y = y0;  
    i = 1;  
    while(i<= steps)  
    {  
        putpixel(x, y, WHITE);  
        x += dx;  
        y += dy;  
        i=i+1;  
    }  
    getch();  
    closegraph();  
}  





#include<stdio.h> 
//#include<conio.h>
#include <bits/stdc++.h>
#include<graphics.h>  
using namespace std;
void drawline(int x0, int y0, int x1, int y1)  
{  
    int dx, dy, p, x, y;  
    dx=x1-x0;  
    dy=y1-y0;  
    x=x0;  
    y=y0;  
    p=2*dy-dx;  
//    while(x<x1)  
int k;

if(dx>=dy)
{
	 k=dx;
}

else
{
 k=dy;
}

for(int i=0;i<=k;i++)
    {  
        if(p>=0)  
        {  
        
            cout<<x<<endl;
            cout<<"y"<<y<<endl;
            x=x+1;
            y=y+1;
            putpixel(x,y,7);  
//            y=y+1;  
            p=p+2*dy-2*dx;  
        }  
        else  
        
        {  
               cout<<x<<endl;
            cout<<"y"<<y<<endl;
            x=x+1;
            putpixel(x,y,7);  
            p=p+2*dy;}  
//            x=x+1;  
        }  
}  
int main()  
{  

	int gd=DETECT,gm;
	int i,j,k;
	char pathtodriver[]="";
	
	cout<<"jhgjfg";
	initgraph(&gd,&gm,pathtodriver);
	drawline(20,10,30,18);
	getch();
	closegraph();
	return 0;
 
}  




#include<graphics.h>
#include<conio.h>
#include<dos.h>
void circlepoints(int x1,int y1,int x, int y,int val)
{
putpixel(x1+x,y1+y,val);
putpixel(x1+y,y1+x,val);
putpixel(x1+y,y1-x,val);
putpixel(x1+x,y1-y,val);
putpixel(x1-x,y1-y,val);
putpixel(x1-y,y1-x,val);
putpixel(x1-x,y1+y,val);
putpixel(x1-y,y1+x,val);
}
void midpointcircle(int x1,int y1,int r,int value)
{
int x=0,y=r,p;
p=1-r;
circlepoints(x1,y1,x,y,value);
while(x<y)
{
if(p<0)
{
p=p+2.0*x+3.0;
}
else
{
p=p+2.0*(x-y)+5.0;
y=y-1;
}
x=x+1;
circlepoints(x1,y1,x,y,value);
} }
void main()
{
int gd =DETECT,a,gm;
initgraph(&gd,&gm,"C:\\TURBOC3\\BGI");
printf("enter radius");
scanf("%d",&a);
midpointcircle(100,100,a,5);
getch();
closegraph();
}



#include<graphics.h>
#include<iostream>
using namespace std;
void ellipse(double xc,double yc,double a,double b)
{
 double p=b*b-a*a*b+a*a/4;
 double x=0, y=b;
 while(2.0*b*b*x <= 2.0*a*a*y)
 {
 if(p < 0)
 {
 x++;
 p = p+2*b*b*x+b*b;
 }
 else
 {
 x++;
 y--;
 p = p+2*b*b*x-2*a*a*y-b*b;
 }
 putpixel(xc+x,yc+y,WHITE);
 putpixel(xc+x,yc-y,WHITE);
 putpixel(xc-x,yc+y,WHITE);
 putpixel(xc-x,yc-y,WHITE);
 delay(100);
 }
 p=b*b*(x+0.5)*(x+0.5)+a*a*(y-1)*(y-1)-a*a*b*b;
 while(y > 0)
 {
 if(p <= 0)
 {
 x++;
 y--;
 p = p+2*b*b*x-2*a*a*y+a*a;
 }
 else
 {
 y--;
 p = p-2*a*a*y+a*a;
 }
 putpixel(xc+x,yc+y,WHITE);
 putpixel(xc+x,yc-y,WHITE);
 putpixel(xc-x,yc+y,WHITE);
 putpixel(xc-x,yc-y,WHITE);
 delay(100);
 } }
int main()
{
 int gd = DETECT, gm;
 double xc,yc,x,y, a,b;
 initgraph(&gd, &gm, "");
 cout<<"Enter coordinates of centre: ";
 cin>>xc>>yc;
 cout<<"Enter length of major and minor axix a,b: ";
 cin>>a>>b;
 ellipse(xc, yc, a, b);
 getch();
 closegraph();
}




//
//
//
//
#include <iostream>
#include <graphics.h>

using namespace std;

void scanlineFill(int x[], int y[], int n) {
    int ymax = y[0], ymin = y[0];

    // find minimum and maximum y values of the polygon
    for (int i = 1; i < n; i++) {
        ymax = max(ymax, y[i]);
        ymin = min(ymin, y[i]);
    }

    // scanline algorithm
    for (int i = ymin; i <= ymax; i++) {
        // find intersections of scanline with polygon edges
        int intersections[n], count = 0;

        for (int j = 0; j < n; j++) {
            int k = (j+1) % n;

            if (y[j] <= i && y[k] > i || y[k] <= i && y[j] > i) {
                float xint = (float)(x[j] + (i-y[j])*(x[k]-x[j])/(y[k]-y[j]));
                /*
                The equation of the line passing through(x[j], y[j]) and (x[k], y[k] is given by:
                (y - y[j]) / (y[k] - y[j]) = (x - x[j]) / (x[k] - x[j])
                rearranging to get x in terms of y:
                x = x[j] + (y - y[j]) * (x[k] - x[j]) / (y[k] - y[j])
                */
               
                intersections[count] = xint;
                count++;
            }
        }

        // sort intersections by x coordinate
        for (int j = 0; j < count; j++) {
            for (int k = j+1; k < count; k++) {
                if (intersections[j] > intersections[k]) {
                    int temp = intersections[j];
                    intersections[j] = intersections[k];
                    intersections[k] = temp;
                }
            }
        }

        // fill pixels between pairs of intersections
        for (int j = 0; j < count; j += 2) {
            for (int x = intersections[j]; x <= intersections[j+1]; x++) {
                putpixel(x, i, WHITE);
            }
        }
    }
}

int main() {
    int gd = DETECT, gm;
    initgraph(&gd, &gm, "");

    int x[] = { 200, 100, 300 };
    int y[] = { 200, 700, 700 };

    scanlineFill(x, y, 3);

    getch();
    closegraph();
    return 0;
}

//
//


#include<graphics.h>
#include<conio.h>
#include<iostream>
using namespace std;

static int Left=1,rt=2,btm=4,top=8, xmin,ymin,xmax,ymax;
int getcode(int x, int y)
{
	int code=0;
	if(y > ymax) code = top;
	if(y < ymin) code = btm;
	if(x < xmin) code = Left;
	if(x > xmax) code = rt;
	return code;
}
int main()
{
	int gd=DETECT,gm;
	initgraph(&gd, &gm, "C:\YOGISOFT\TC\BGI");
	setcolor(WHITE);
	cout<<"\n\t Enter Window Minimum & Maximum Vlaues :: ";
	cin>>xmin>>ymin>>xmax>>ymax;
	rectangle(xmin,ymin,xmax,ymax);
	
	int x1,y1,x2,y2;
	cout<<"\n\t Enter The Endpoints of the Line :: ";
	cin>>x1>>y1>>x2>>y2;
	line(x1,y1,x2,y2);
	getch();
	
	int outcode1 = getcode(x1,y1), outcode2 = getcode(x2,y2);
	int accept = 0;
	while(1)
	{
		float m=(float)(y2-y1)/(x2-x1);
		if(outcode1==0 && outcode2 == 0){
			accept=1;
			break;
		}else if((outcode1 & outcode2 )!=0){
			break;
		}else{
			int x,y,temp;
			if(outcode1 ==0){
				temp=outcode2;
			}
      else{
				temp = outcode1;
			}
			if(temp & top){
				x=x1+(ymax-y1)/m;
				y=ymax;
			}else if(temp & btm){
				x=x1+(ymin-y1)/m;
				y=ymin;
			}else if (temp & Left){
				x=xmin;
				y=y1+m*(xmin-x1);	
			}else if(temp & rt){
				x=xmax;
				y=y1+m*(xmax-x1);
			}
			if(temp == outcode1){
				x1=x;
				y1=y;
				outcode1=getcode(x1,y1);
			}else{
				x2=x;
				y2=y;
				outcode2=getcode(x2,y2);
			}
		}
	}
	cout<<"\n\t AFTER CLIPPING :: - ";
	if(accept){
		cleardevice();
		rectangle(xmin,ymin,xmax,ymax);
		setcolor(RED);
		line(x1,y1,x2,y2);
	}
	getch();
	closegraph();
}




#include<iostream>
#include <graphics.h>
#include<math.h>
using namespace std;

int main()
{
            int gm;
            int gd=DETECT;
            int x1,x2,x3,y1,y2,y3,nx1,nx2,nx3,ny1,ny2,ny3,c;
            int sx,sy,xt,yt,r,shx,shy;
            char d;
            float t;
//            char  pathodriver[]= " "
            initgraph(&gd,&gm," ");
            cout<<"\t Program for basic transactions :";
            cout<<("\n\t Enter the points of triangle :\n");
            cin>>x1>>y1>>x2>>y2>>x3>>y3;
            line(x1,y1,x2,y2);
            line(x2,y2,x3,y3);
            line(x3,y3,x1,y1);
         //   getch();
         
         
         	
            	 char ch = 'y';
            while(ch=='y')
            {
            
            cout<<("\n 1.Transaction\n 2.Rotation\n 3.Scalling\n 4.Shearing ");
            cout<<("Enter your choice:");
            cin>>c;
            
           	
			
            switch(c)
            {
            
                        case 1:
                                    cout<<("\n Enter the translation factor");
                                    cin>>xt>>yt;
                                    nx1=x1+xt;
                                    ny1=y1+yt;
                                    nx2=x2+xt;
                                    ny2=y2+yt;
                                    nx3=x3+xt;
                                    ny3=y3+yt;
                                    line(nx1,ny1,nx2,ny2);
                                    line(nx2,ny2,nx3,ny3);
                                    line(nx3,ny3,nx1,ny1);
                                  	break;

                        case 2:
                                    cout<<("\n Enter the angle of rotation");
                                    cin>>r;
                                    t=3.14*r/180;
                                    nx1=abs(x1*cos(t)-y1*sin(t));
                                    ny1=abs(x1*sin(t)+y1*cos(t));
                                    nx2=abs(x2*cos(t)-y2*sin(t));
                                    ny2=abs(x2*sin(t)+y2*cos(t));
                                    nx3=abs(x3*cos(t)-y3*sin(t));
                                    ny3=abs(x3*sin(t)+y3*cos(t));
                                    line(nx1,ny1,nx2,ny2);
                                    line(nx2,ny2,nx3,ny3);
                                    line(nx3,ny3,nx1,ny1);
                              		break;

                        case 3:
                                    cout<<("\n Enter the scalling factor");
                                    cin>>sx>>sy;
                                    nx1=x1*sx;
                                    ny1=y2*sy;
                                    nx2=x2*sx;
                                    ny2=y2*sy;
                                    nx3=x3*sx;
                                    ny3=y3*sy;
                                    line(nx1,ny1,nx2,ny2);
                                    line(nx2,ny2,nx3,ny3);
                                    line(nx3,ny3,nx1,ny1);
                                  	break;
                                  	
                        case 4 :
                        	     
                        	      cout<<"enter the direction of shear : ";
	                                cin>>d;
                                 	if(d=='x')
                                   	{
	                               	cout<<"enter x-direction of shear : ";
	                                     	cin>>shx;
	                                      	y1=y1+shx*x1;
	                                          	y2=y2+shx*x2;
	                                        	setcolor(RED);
		//rectangle(x1,y1,x2,y2);
		
 line(x1,y1,x2,y2);
            line(x2,y2,x3,y3);
            line(x3,y3,x1,y1);
		
	}
	else
	{
		cout<<"enter y-direction of shear : ";
		cin>>shy;
		x1=x1+shy*y1;
		x2=x2+shy*y2;
		setcolor(RED);
		
				
 line(x1,y1,x2,y2);
            line(x2,y2,x3,y3);
            line(x3,y3,x1,y1);
		
	}

                        case 5:
                                    break;
                        default:
                                    cout<<"Enter the correct choice";
            }
            
            cout<<" want to continue ";
            cin>>ch;
            
        }
                                    getch();
									closegraph();
}



#include<iostream>
#include<cstdio>
#include<cmath>
using namespace std;
class Matrix3D{
    public:
    float **arr;
    int r,c;
    Matrix3D(){}
    Matrix3D(int r, int c){
        this->r = r;
        this->c = c;
        this->arr = new float* [r];
        for(int i = 0; i < r; i++){
            arr[i] = new float[c];
        }
    }
    int* getPlotPoints(){
        int *points = new int[r*2];
        int k=0;
        for(int i =0 ; i<r;i++){
            points[k++] = (int) arr[i][0];
            points[k++] = (int) arr[i][1];            
        }
        points[k++] = (int) arr[0][0];
        points[k++] = (int) arr[0][1];
        // for(int i =0; i<=2*r; i+=2){
        //     cout<<points[i]<<","<<points[i+1]<<"\n";
        // }
        return points;
    }
    void setMatrix(float a[][4]){
        for(int i = 0; i < r; i++){
            for(int j = 0; j < c; j++){
                this->arr[i][j] = a[i][j];
            }
        }
    }
    void printMatrix(){
        for(int i =0 ; i < r; i++){
            cout<<"[ ";
            for(int j = 0; j <c; j++){
                cout<<arr[i][j]<<" ";
            }
            
            i==r-1 ? printf("](%d,%d)\n",r,c): printf("]\n");
        }
    }
    static Matrix3D multiply(Matrix3D m1, Matrix3D m2){
        Matrix3D m(m1.r, m2.c);
        for(int i = 0; i < m1.r; i++){
            for(int j = 0; j < m2.c ; j++){
                for(int k = 0; k < m1.c ; k++){
                    m.arr[i][j] += m1.arr[i][k]*m2.arr[k][j];
                }
            }
        }
        return m;
    }
    static Matrix3D multiply(Matrix3D* m1, Matrix3D m2){
        Matrix3D m(m1->r, m2.c);
        for(int i = 0; i < m1->r; i++){
            for(int j = 0; j < m2.c ; j++){
                for(int k = 0; k < m1->c ; k++){
                    m.arr[i][j] += m1->arr[i][k]*m2.arr[k][j];
                }
            }
        }
        return m;
    }
};
class Projection{
    private:
        Matrix3D *points;
        int orthographic(){
            cout<<"\nPARALLEL: ORTHOGRAPHIC PROJECTION***\n";
            Matrix3D trf(4,4);
            float t[][4]={
                {1,0,0,0},
                {0,1,0,0},
                {0,0,1,0},
                {0,0,0,1},
            };
            cout<<"Enter projection on:\n";
            cout<<"\n1.X=0 plane\n2.Y=0 plane\n3.Z=0 plane\n: ";
            int ortho;
            cin>>ortho;
            if(ortho == 1){
                t[0][0] = 0;
            }else if(ortho == 2){
                t[1][1] = 0;
            }else if(ortho == 3){
                t[2][2] = 0;
            }else{
                cout<<"Invalid choice";
                return 0;
            }
            trf.setMatrix(t);
            cout<<"\nTransformation matrix:\n";
            trf.printMatrix();
            cout<<"\nOriginal points:\n";
            this->points->printMatrix();
            Matrix3D result = Matrix3D::multiply(this->points, trf);
            cout<<"\nTransformed points: \n";
            result.printMatrix();
            return 0;
        }
        int oblique(){
            cout<<"\n***PARALLEL: OBLIQUE PROJECTION***\n";
            cout<<"***(Taking horizontal inclination angle = 30 degree)***\n";
            Matrix3D trf(4,4);
            float t[][4]={
                {1,0,0,0},
                {0,1,0,0},
                {0,0,1,0},
                {0,0,0,1},
            };
            cout<<"Enter your choice:\n";
            cout<<"\n1.Cavalier projection\n2.Cabinet projection\n: ";
            int ob;
            cin>>ob;
            if(ob == 1){
                t[2][0] = -0.866;
                t[2][1] = -0.5;
            }else if(ob == 2){
                t[2][0] = -0.433;
                t[2][1] = -0.25;
            }else{
                cout<<"Invalid choice";
                return 0;
            }
            trf.setMatrix(t);
            cout<<"\nTransformation matrix:\n";
            trf.printMatrix();
            cout<<"\nOriginal points:\n";
            this->points->printMatrix();
            Matrix3D result = Matrix3D::multiply(this->points, trf);
            cout<<"\nTransformed points: \n";
            result.printMatrix();
            return 0;
        }
        int axonometric(){
            cout<<"\nPARALLEL: AXONOMETRIC PROJECTION***\n";
            cout<<"***(Onto Z=0 plane)***\n";
            Matrix3D trf(4,4);
            float t[][4]={
                {1,0,0,0},
                {0,1,0,0},
                {0,0,1,0},
                {0,0,0,1},
            };
            cout<<"Enter your choice:\n";
            cout<<"\n1.Trimetric projection\n2.Dimetric projection\n3.Isometric projection\n: ";
            int axono;
            cin>>axono;
            if(axono == 1){
                t[2][2] = 0;
                int theta, phi;
                cout<<"Enter angle for first rotation: ";
                cin>>phi;
                cout<<"Enter angle for second rotation: ";
                cin>>theta;
                float sintheta;
                sintheta = sin(theta*3.14159/180);

                t[0][0] = cos(phi*3.14159/180);
                t[2][0] = sin(phi*3.14159/180); 
                
                t[0][1] = sintheta * t[2][0];
                t[1][1] = cos(theta*3.14159/180);
                t[2][1] = -1*sintheta*t[0][0];

            }else if(axono == 2){
                t[2][2] = 0;
                float fz,phi,theta,sintheta;
                cout<<"Enter foreshortening factor Fz:  ";
                cin>>fz;
                phi = fz / (float) sqrt(2 - fz*fz);
                theta = fz / (float) sqrt(2);
                cout<<"Angle for first rotation (phi): "<<phi<<" degree\n";
                cout<<"Angle for second rotation (theta): "<<theta<<" degree\n";

                sintheta = sin(theta*3.14159/180);

                t[0][0] = cos(phi*3.14159/180);
                t[2][0] = sin(phi*3.14159/180); 
                
                t[0][1] = sintheta * t[2][0];
                t[1][1] = cos(theta*3.14159/180);
                t[2][1] = -1*sintheta*t[0][0];


            }else if(axono == 3){
                t[2][2] = 0;
                cout<<"Taking Angle for first rotation (phi): -45 degree\n";
                cout<<"Taking Angle for second rotation (theta): 35.26 degree";
                t[0][0] = 0.707;
                t[2][0] = -0.707;
                
                t[0][1] = -0.408;
                t[1][1] =  0.816;
                t[2][1] = -0.408;
            }else{
                cout<<"Invalid choice";
                return 0;
            }
            trf.setMatrix(t);
            cout<<"\nTransformation matrix:\n";
            trf.printMatrix();
            cout<<"\nOriginal points:\n";
            this->points->printMatrix();
            Matrix3D result = Matrix3D::multiply(this->points, trf);
            cout<<"\nTransformed points: \n";
            result.printMatrix();
            return 0;
        }

        int parallel(){
            cout<<"\n***PARALLEL PROJECTION***\n";
            int choicep1;
            cout<<"Enter your choice:\n";
            cout<<"\n1.ORTHOGRAPHIC\n2.AXONOMETRIC\n3.OBLIQUE\n: ";
            cin>>choicep1;
            switch (choicep1)
            {
            case 1:
                orthographic();
                break;
            case 2:
                axonometric();
                break;
            case 3:
                oblique();
                break;
            default: cout<<"Invalid choice.";
                break;
            }
            return 0;
        }
        int perspective(){
            cout<<"\n***PERSPECTIVE PROJECTION***\n";
            cout<<"***(Onto Z=0 plane)***\n";
            cout<<"***(Taking p,q,r to be 0.1 in all 3 cases)***\n";
            Matrix3D trf(4,4);
            float t[][4]={
                {1,0,0,0},
                {0,1,0,0},
                {0,0,1,0},
                {0,0,0,1},
            };
            cout<<"Enter your choice:\n";
            cout<<"1.One point projection\n2.Two point projection\n3.Three point projection\n: ";
            int pers;
            cin>>pers;
            if(pers == 1){
                t[2][2] = 0;
                t[0][3] = 0.1;
            }else if(pers == 2){
                t[2][2] = 0;
                t[0][3] = 0.1;
                t[1][3] = 0.1;
            }else if(pers == 3){
                t[2][2] = 0;
                t[0][3] = 0.1;
                t[1][3] = 0.1;
                t[2][3] = 0.1;
            }else{
                cout<<"Invalid choice";
                return 0;
            }
            trf.setMatrix(t);
            cout<<"\nTransformation matrix:\n";
            trf.printMatrix();
            cout<<"\nOriginal points:\n";
            this->points->printMatrix();
            Matrix3D result = Matrix3D::multiply(this->points, trf);
            cout<<"\nTransformed points: \n";
            result.printMatrix();
            return 0;
        }
    public:
        int exec(){
            int choice;
            while(true){
                cout<<"\n\n Select the type of projection:\n";
                cout<<"1.Perspective\n2.Parallel\n3.Exit\n:";
                cin>>choice;
                switch (choice)
                {
                case 1:
                    perspective();
                    break;
                case 2:
                    parallel();
                    break;
                case 3:
                    return 0;
                default:
                    cout<<"Invalid choice, try again.";
                    break;
                }
            }
           return 0; 
        }
        Projection(Matrix3D *t){
            this->points = t;
        }
};
class transform3d{
    public:
        Matrix3D *p;
    transform3d(){p = NULL;}
    ~transform3d(){
        
    }
    void getPoints(){
        int n;
        cout<<"Enter no of points: ";
        cin>>n;
        
        p = new Matrix3D(n,4);
        float x,y,z;
        for(int i = 0; i < n; i++){
            printf("Point %d\nEnter x co-ordinate: ", i+1);
            cin>>x;
            cout<<"Enter y co-ordinate: ";
            cin>>y;
            cout<<"Enter z co-ordinate: ";
            cin>>z;            
            p->arr[i][0] = x;
            p->arr[i][1] = y;
            p->arr[i][2] = z; 
            p->arr[i][3] = 1; 
        }
        cout<<"Points matrix is:\n";
        p->printMatrix();
    }
    void setPoints(int n,float arr[][4]){
       
        p = new Matrix3D(n,4);
        p->setMatrix(arr);
    }
    void translate(){
        float tx, ty,tz;
        cout<<"Enter translation in x-axis: ";
        cin>>tx;
        cout<<"Enter translation in y-axis: ";
        cin>>ty;
        cout<<"Enter translation in z-axis: ";
        cin>>tz;

        float t[4][4] = {
            {1,0,0,0},
            {0,1,0,0},
            {0,0,1,0},
            {tx,ty,tz,1}         
        };
        Matrix3D trf(4,4);
        trf.setMatrix(t);
        cout<<"\nTransformation matrix:\n";
        trf.printMatrix();
        cout<<"\nOriginal points:\n";
        this->p->printMatrix();
        Matrix3D result = Matrix3D::multiply(this->p, trf);
        cout<<"\nTransformed points: \n";
        result.printMatrix();        
    }   
    void scale(){
        float sx, sy,sz;
        cout<<"Enter X-axis scaling factor: ";
        cin>>sx;
        cout<<"Enter Y-axis scaling factor: ";
        cin>>sy;
        cout<<"Enter Z-axis scaling factor: ";
        cin>>sz;
        
        float t[4][4] = {
            {sx,0,0,0},
            {0,sy,0,0},
            {0,0,sz,0},
            {0,0,0,1}         
        };
        Matrix3D trf(4,4);
        trf.setMatrix(t);
        cout<<"\nTransformation matrix:\n";
        trf.printMatrix();
        cout<<"\nOriginal points:\n";
        this->p->printMatrix();
        Matrix3D result = Matrix3D::multiply(this->p, trf);
        cout<<"\nTransformed points: \n";
        result.printMatrix();        
    }
    void rotate(){
        float thetaR, thetaD;
        cout<<"Enter angle of rotation, in degrees";
        cin>>thetaD;
        thetaR = thetaD * 3.14159/180;
        float cosT = (float) cos(thetaR);
        float sinT = (float) sin(thetaR);
        float t[4][4] = {
            {1,0,0,0},
            {0,1,0,0},
            {0,0,1,0},
            {0,0,0,1}         
        };
        bool flag = true;
        while(flag){
            int choice;
            cout<<"\nRotate about:\n1.X-Axis\n2.Y-Axis\n3.Z-Axis: ";
            cin>>choice;
            switch (choice)
            {
                case 1:
                    t[1][1] = t[2][2] = cosT;
                    t[1][2] = -1*sinT;
                    t[2][1] = sinT;
                    flag = false;
                    break;
                case 2:
                    t[0][0] = t[2][2] = cosT;
                    t[0][2] = sinT;
                    t[2][0] = -1*sinT;
                    flag = false;
                    break;
                case 3:
                    t[0][0] = t[1][1] = cosT;
                    t[0][1] = -1*sinT;
                    t[1][0] = sinT;
                    flag = false;
                    break;
                default: cout<<"Invalid choice, try again";
                }
        }
        Matrix3D trf(4,4);
        trf.setMatrix(t);
        cout<<"\nTransformation matrix:\n";
        trf.printMatrix();
        cout<<"\nOriginal points:\n";
        this->p->printMatrix();
        Matrix3D result = Matrix3D::multiply(this->p, trf);
        cout<<"\nTransformed points: \n";
        result.printMatrix();        
    }
    void reflect(){
        float t[4][4] = {
            {1,0,0,0},
            {0,1,0,0},
            {0,0,1,0},
            {0,0,0,1}         
        };
        bool flag = true;
        while(flag){
            cout<<"\nReflect about:\n1.X-Axis\n2.Y-Axis\n3.Z-Axis: ";
            int choice;
            cin>>choice;
            switch (choice)
            {
                case 1:
                    t[1][1] = t[2][2] = -1;
                    flag = false;
                    break;
                case 2:
                    t[0][0] = t[2][2] = -1;
                    flag = false;
                    break;
                case 3:
                    t[0][0] = t[1][1] = -1;
                    flag = false;
                    break;
                default: cout<<"Invalid choice, try again";
                }
        }
        Matrix3D trf(4,4);
        trf.setMatrix(t);
        cout<<"\nTransformation matrix:\n";
        trf.printMatrix();
        cout<<"\nOriginal points:\n";
        this->p->printMatrix();
        Matrix3D result = Matrix3D::multiply(this->p, trf);
        cout<<"\nTransformed points: \n";
        result.printMatrix();       
    }
};

int main(){
    transform3d t;
    t.getPoints();
    Projection p(t.p); 
    while(true){
        cout<<"\nEnter your choice:\n";
        cout<<"1.Translate\n2.Scale\n3.Rotate\n4.Reflect\n5.Projection\n6.Show points\n7.Change points\n8.Exit\n: ";
        int choice;
        cin>>choice;
        switch(choice)
        {
        case 1:
            t.translate();
            break;
        case 2:
            t.scale();
            break;
        case 3:
            t.rotate();
            break;
        case 4:
            t.reflect();
            break;
        case 5:
            p.exec();
        case 6:
            cout<<"\nPoints Matrix is:\n";
            t.p->printMatrix();
            break;
        case 7:
            t.getPoints();
            break;
        case 8:
            return 0;
        default:
            cout<<"\nInvalid choice. Please try again";
            break;
        }
    }
    return 0;
}









#include<iostream>
#include<conio.h>
#include<graphics.h>
#include<math.h>
void bezier_curve(int x[4],int y[4]){
double t;
for(t=0.0;t<1.0;t=t+0.0005){
double xt=pow(1-t,3)*x[0]+3*t*pow(1-
t,2)*x[1]+3*pow(t,2)*(1-t)*x[2]+pow(t,3)*x[3];
double yt=pow(1-t,3)*y[0]+3*t*pow(1-
t,2)*y[1]+3*pow(t,2)*(1-t)*y[2]+pow(t,3)*y[3];
putpixel(xt,yt,YELLOW);
}
for(int i=0;i<3;i++){
line(x[i],y[i],x[i+1],y[i+1]);
}
}
void hermite_curve(int x1,int y1,int x2,int y2,double t1,double
t4){
float x,y,t;
for(t=0.0;t<=1.0;t+=0.001){
x=(2*t*t*t-3*t*t+1)*x1+(-2*t*t*t+3*t*t)*x2+(t*t*t2*t*t+t)*t1+(t*t*t-t*t)*t4;
y=(2*t*t*t-3*t*t+1)*y1+(-2*t*t*t+3*t*t)*y2+(t*t*t2*t*t+1)*t1+(t*t*t-t*t)*t4;
putpixel(x,y,YELLOW);
}
putpixel(x1,y1,GREEN);
putpixel(x2,y2,GREEN);
line(x1,y1,x2,y2);
}
voidmain()
{
clrscr();
int gdriver=DETECT,gmode,errorcode;
int x1,y1,x2,y2,n;
double t1,t4;
initgraph(&gdriver,&gmode,"C:\\TURBOC3\\BGI");
int x[4],y[4];
int i;
cout<<"1.BezierCurve\n2.HermiteCurve\n";
cout<<"Enteryourchoice:";
cin>>n;
if(n==1){
cout<<"Enterxandycoordinates\n";
for(i=0;i<4;i++){
cout<<"x"<<i+1<<":";
cin>>x[i];
cout<<"y"<<i+1<<":";
cin>>y[i];
cout<<endl;
}
bezier_curve(x,y);
}
elseif(n==2){
cout<<"Enterthexcoordinateof1sthermitepoint:";
cin>>x1;
cout<<"Entertheycoordinateof1sthermitepoint:";
cin>>y1;
cout<<"Enterthexcoordinateof4thhermitepoint:";
cin>>x2;
cout<<"Entertheycoordinateof4thhermitepoint:";
cin>>y2;
cout<<"Entertangentatp1:";
cin>>t1;
cout<<"Entertangentatp4:";
cin>>t4;
hermite_curve(x1,y1,x2,y2,t1,t4);
}
else{
cout<<"\nInvalidChoice";
}
getch();
}
